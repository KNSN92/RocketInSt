datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

model User {
  id            String          @id @default(cuid())
  name          String?
  nickname      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(User)

  campus   Campus? @relation(fields: [campusId], references: [id])
  campusId String?

  courseFrequency CourseFrequency?

  lesson Lesson[]

  afterSchool AfterSchool?

  // Self-relation for followers and following
  followers User[] @relation("UserFollowRelation")
  following User[] @relation("UserFollowRelation")
}

enum Role {
  User
  Admin
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Campus {
  id         String @id @default(uuid())
  name       String

  rooms      Room[] @relation("rooms")

  mainRoom   Room?   @relation("mainRoom", fields: [mainRoomId], references: [id])
  mainRoomId String? @unique

  members    User[]

  allMember  Int
}

model Room {
  id   String @id @default(uuid())
  name String

  campus   Campus @relation(name: "rooms", fields: [campusId], references: [id], onDelete: Cascade)
  campusId String

  mainFor Campus? @relation("mainRoom")

  capacity Int

  lessons Lesson[]

  roomPlan RoomPlan?
}

model RoomPlan {
  id String @id @default(uuid())

  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String @unique

  x Int
  y Int
  w Int
  h Int
}

model Lesson {
  id String @id @default(uuid())

  title String

  period LessonPeriod
  day    DayOfWeek

  rooms Room[]

  enrolledUsers User[]
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

enum LessonPeriod {
  FirstPeriod
  SecondPeriod
  ThirdPeriod
  FourthPeriod
  FifthPeriod
  SixthPeriod
}

enum CourseFrequency {
  OncePerWeek
  ThricePerWeek
  FiveTimesPerWeek
}

enum AfterSchool {
  Leave
  Stay
}
